---
title: "Network_practice"
author: "Claire Shaw"
date: "4.15.25"
code-fold: true
---

```{r}
# install.packages("igraph")

install.packages("igraph")

library(igraph)
```
```{r}
library(readr)

# Read the CSV file
Network_people <- read_csv("/Users/claireshaw/Desktop/BCB520/posts/Network_Data/Network_people.csv")

# View the data
View(Network_people)

```

```{r}

getwd()
file.exists("/Users/claireshaw/Desktop/BCB520/posts/Network_Data/Networks_Relations.csv")

library(readr)

# Read the CSV file
Networks_Relations <- read_csv("/Users/claireshaw/Desktop/BCB520/posts/Network_Data/Networks_Relations.csv")

# View the data
View(Networks_Relations)

```


```{r}

getwd()
file.exists("/Users/claireshaw/Desktop/BCB520/posts/Network_Data/Networks_Adjancy_Matrix.csv")

library(readr)

# Read the CSV file
Networks_Adjancy_Matrix <- read_csv("/Users/claireshaw/Desktop/BCB520/posts/Network_Data/Networks_Adjancy_Matrix.csv")

# View the data
View(Networks_Adjancy_Matrix)


```

## Network People 
```{r}
library(igraph)
library(dplyr)

```



```{r}

library(igraph)
library(dplyr)

# Filter out NA names in Network_people
filtered_people <- Network_people %>%
  filter(!is.na(name))

# Update Networks_Relations to remove edges with NA nodes
filtered_relations <- Networks_Relations %>%
  filter(from %in% filtered_people$name & to %in% filtered_people$name)

# Create the graph from the filtered edge list
network_graph <- graph_from_data_frame(d = filtered_relations, directed = FALSE)

# Add attributes from filtered_people
V(network_graph)$department <- filtered_people$department[match(V(network_graph)$name, filtered_people$name)]
V(network_graph)$rank <- filtered_people$rank[match(V(network_graph)$name, filtered_people$name)]
V(network_graph)$bcb520 <- filtered_people$BCB520[match(V(network_graph)$name, filtered_people$name)]

# Use a clearer layout
layout <- layout_with_fr(network_graph)

# Plot the graph with labels to the side
plot(network_graph,
     layout = layout,
     vertex.color = ifelse(V(network_graph)$bcb520, "green", "red"),
     vertex.label = V(network_graph)$name,
     vertex.size = 10,
     vertex.label.cex = 0.8,
     vertex.label.dist = 1.5,  # Distance from the vertex
     vertex.label.degree = -pi/4,  # Position to the side
     main = "Network Graph")

```
#### Used layout_with_fr
##### commonly used for minimizeing edge crossings and evenly distributing nodes 

## Network Relations

```{r}
library(igraph)
library(dplyr)


# Create the graph from the edge list
network_graph <- graph_from_data_frame(d = Networks_Relations, directed = TRUE)

# Use edge attributes for advisor relationships
E(network_graph)$color <- ifelse(Networks_Relations$Advisor, "blue", "gray")

# Use a layout suitable for bipartite-like relationships
layout <- layout_nicely(network_graph)

# Plot the graph
plot(network_graph,
     layout = layout,
     vertex.label = V(network_graph)$name,
     vertex.size = 10,
     vertex.label.cex = 0.8,
     vertex.label.dist = 2.0,  # Distance from the vertex
     vertex.label.degree = pi/5,  # Position up and to the left
     edge.color = E(network_graph)$color,
     main = "Student-Professor Network")
```
#### Used layout_nicely
##### Ideal for quick visulization when you don't have a lay out preference

## Adjancy Matrix

```{r}

# Remove the 'Names' column and convert the rest to a matrix
adjacency_matrix <- as.matrix(Networks_Adjancy_Matrix[,-1])

# Set row names to the 'Names' column
rownames(adjacency_matrix) <- Networks_Adjancy_Matrix$Names

# Print the adjacency matrix
print(adjacency_matrix)


install.packages("reshape2")

library(ggplot2)
library(reshape2)
library(dplyr)

# Replace 'Names' with the correct column name if different
correct_column_name <- "name" # Update this if the column name is different

# Filter out rows with no name or no responses
filtered_data <- Networks_Adjancy_Matrix %>%
  filter(!is.na(.data[[correct_column_name]]) & rowSums(select(., -all_of(correct_column_name))) > 0)

# Summarize total likes per activity
activity_totals <- colSums(select(filtered_data, -all_of(correct_column_name)))

# Order activities by total likes
ordered_activities <- names(sort(activity_totals, decreasing = TRUE))

# Melt the matrix for ggplot2
melted_matrix <- melt(as.matrix(filtered_data[,-1]))

# Reorder activities in the heatmap
melted_matrix$Var2 <- factor(melted_matrix$Var2, levels = ordered_activities)



# Create the heatmap
ggplot(melted_matrix, aes(x = Var2, y = Var1, fill = value)) + 
  geom_tile() +
  scale_fill_gradient(low = "white", high = "blue") +
  labs(x = "Activity", y = "Person", title = "Activity Participation Heatmap") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


```
#### used layout_nicely